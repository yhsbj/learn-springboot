<?xml version="1.0" encoding="UTF-8"?>
<!--
 	debug="true" : 打印logback内部状态（默认当logback运行出错时才会打印内部状态 ），配置该属性后打印条件如下（同时满足）： 
	1、找到配置文件 2、配置文件是一个格式正确的xml文件 也可编程实现打印内部状态，例如： LoggerContext lc = (LoggerContext) 
	LoggerFactory.getILoggerFactory(); StatusPrinter.print(lc); 
    scan="true" ： 自动扫描该配置文件，若有修改则重新加载该配置文件 
    scanPeriod="30 seconds" : 配置自动扫面时间间隔（单位可以是：milliseconds, seconds, minutes 
	or hours，默认为：milliseconds）， 默认为1分钟，scan="true"时该配置才会生效 
	packagingData="true"可以在日志后看到依赖jar包名和版本，很费性能，不建议开启
-->
<configuration debug="false" scan="false" scanPeriod="30 seconds" packagingData="false">
	<!-- 设置 logger context 名称,一旦设置不可改变，默认为default -->
	<property name="home" value="logs" />
	<property name="name" value="frame" />
	<contextName>${name}</contextName> 

	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoders are by default assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
		<encoder>
			<pattern>%d [%-5level] [%thread] %logger{0}.%M.%L - %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="dayFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 当前活动日志文件名 -->
		<file>${home}/${name}.log</file>
		<!-- 文件滚动策略根据%d{patter}中的“patter”而定，此处为每天产生一个文件 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档文件名“.zip或.gz结尾”,表示归档文件自动压缩 -->
			<FileNamePattern>${home}/${name}%d{yyyyMMdd}.log.gz</FileNamePattern>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d [%-5level] [%thread] %logger{0}.%M.%L - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- logger使用匹配度最大的，降级到root，找到logger为止 -->
	<!-- addtivity:是否向上级loger传递打印信息。默认是true。-->
	<logger name="com.line" level="INFO" additivity="false">
		<appender-ref ref="dayFile"/>
	</logger>

	<!-- 至多只能配置一个root -->
	<root level="WARN">
		<appender-ref ref="console" />
	</root>
</configuration>